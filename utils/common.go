package utils

import (
	"crypto/sha256"
	"encoding/binary"
	"encoding/hex"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/rpc"
	istanbulCore "github.com/mapprotocol/atlas/consensus/istanbul/core"
	"github.com/mapprotocol/atlas/core/types"
	blscrypto "github.com/mapprotocol/atlas/helper/bls"
	"github.com/mapprotocol/zk-map-server/resource/log"
	"math/big"
	"strconv"
	"strings"
)

var (
	PUBLENGTH = 8
)

func IsEmpty(s string) bool {
	return len(strings.TrimSpace(s)) == 0
}

func IsDuplicateError(err string) bool {
	return strings.Contains(err, "Duplicate entry")
}

func Go(fn func()) {
	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Logger().WithField("error", r).Error("recover failed")
			}
		}()

		fn()
	}()
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////ÃŸ
func bytesToUint64(data []byte, startBit, bitSize int) uint64 {
	var result uint64
	for i := 0; i < bitSize; i++ {
		byteIndex := (startBit + i) / 8
		bitIndex := uint(startBit+i) % 8
		result <<= 1
		if data[byteIndex]&(1<<(7-bitIndex)) != 0 {
			result |= 1
		}
	}
	return result
}
func bytesToUint64_2(data []byte, startBit, endBit int) uint64 {
	var result uint64
	for i := startBit; i < endBit; i++ {
		byteIndex := i / 8
		bitIndex := uint(i % 8)
		result <<= 1
		result |= uint64((data[byteIndex] >> (7 - bitIndex)) & 0x01)
	}
	return result
}
func keepedBlsPub(count int) [][]byte {

	strBlsPub := []string{
		"0cd839becffd1676c36e4903c2ea82e9337e90c4b890b339ba64095b6aa66ca101bfc6fbe855b3d515d266423cd6d98ff8e0a7a41da79b26694cc8c1906d6c150110bd24d78115c8d2864f8e7982a87f4a556dd408d7490982b6d88f23cd7c4c2cc5e86bbd2dd7b22d403d4ee8d7efea8f0d94ff34ea92db76b9bf427ebad166",
		"145d6224bc61d6a039b1515d0d84d070e70b5592ce57baefaccd98ad60bcbc651b51fe9dc1261a4bfccec20fe53c12e3764b7f93f7c0f3933c1c0a4cc995e4c92edf08bc569cce8966687fc09963c4b9b17e896f93de1abb5289a4b439f4c91b27c0c7308516896bf81bb10cf0be3d9c0f69800338a301c0d3f203f3c81143f8",
		"2f68b885858602ea3bf8fb3193e2184dc8a57acb0eb2fc64fa26b332f64bd4701eb9e3875a215bd6462a279d7580464555ced7364545f7a4f463aa44d9a9e8061018493e27011ee9f91c40614ba382e2441ee7a0e073ba942140ede93f7adafe221ba8a4be675f55e1c39448dec589dfff8e2d81b82efc6397c742e3a716e782",
		"09565c185c8edc741bd8b364c54772bb89946121fbc3fc36721adb3aefd907f40364c9a6e02658f005e0ae69170d56204130651c7036ba13729333c84a9214361e84e416f69184a32cf67137209de5f418fd9ff26b74110c6e2d7a49997ff65d09d0d3b4e2ce3eea0ee463bd7e3979d2836854023ebba9fd0bcd4da057271361",
		"09c4e14fe68d5f40c3fda0911a3cd75c43c13dbdd2a9a0f6c735e070ee8a121c13ea7c80a68fb4946b16e91359993869d8c046ede2019949d86b4b7bc5e1724e2c2d367a4c5caad47d7d2cd021921ae57508c2ec3fbf431d4aeb4d80235087f619c0cffc087809db998d7ae6e09d92e8cf7af4e3c01ce036cd66eec48f096ef5",
		"0161fadaa9c26e10ebb37803fc63e621593250d58ebc8178b2f6731c52b81c1820ff4d36fb91dad6ade4a025f112dc4a02ef3e101065c648505dc453c8da4fa123cb3d8ff3e1efb5ead3ebe45d1ccd1f18d70639230e0e94a0c5e0da3dab462919e569cfd261e0d00da2e4df08dbc6cfcb6f1ed8cde9723fcafd1fb26ec25ab9",
		"2020e7fb1953182092c73e9febfb9629043e71f3836396efd872ad9cb6b5625a29ae7b5e95e6da8a587ba84e87a9681e792c1a5506feaa93363b2027f8eaa34923c82fba3bf9dc03473ffa131fba39f60aa5181ac45fc61c0eb1b61e3d60220b18daf1ce99add4d7ce9b5292774ab0f89aef415effe15aa8a1021e66ba060777",
		"1277455756f8a2faeb57bf995adfe0d0a88f6bce2b0b0022b46149511f6fc1cb283cec31e4f18a5dd128059dc921df38b583b824301b916203e1e05d85c27e590546639349950110371e8c9fe52c593b625826fa06704a93ec298ca23934e0e903e4a1ab7101e1e3ced609efb56183ef7d1c96ee95d00e4401fb9dd485a854bc",
		"00616d0361fe364b0b02a2371b593a117e26647211bed9a439632589f076205401815b4991f770b987362aa6911a4f94891dd6b8c2d32568529c6f08ee23903c190ff04f92a7a3371c2e1291424d0a17115d09f1ebb2b503684ab071d7fe5b7123f69ebbec9f8fb689f43b426b3dc7b5d7662cf6bd8c2a187219828187566fea",
		"0a13d5d24595afcd312013b8a1fa30c83cfd856a990038287d7068fc102a38ff121ea08fd6e48f4769aeea298f1ddc6c6addd4b3a0d43ea27fe2ba2735ee5d00082fd489509bc17404183fffeb40bbdd123eb403b5a66510e35b4784d4c9c68616c66508368772a5f0332c755b3f94ef30b5247af5df3baea36ff40f1ffc8646",
		"01e6dee22eb57443862c3e0b8ae9dc10783001bba19ee65e016f355d9c3decd5249f14b4fc241a1a6b59cdc600f8515d6fdde0858d47ac3ede024df9129000fe07ee4a726a23081012db29a272012321133e5145e75c397322b21db715e5d1382fe7a8339f573776f5824cedcb4a62822e510eea1d4d9e909536360bc7939e70",
		"0d8245e243369752cd1108a684cd0fdf72a384d9289c1ad3f3d3a6ce9c2ba25f157a61beba19065ac84e4efea0094ac015520dc753406db3fc2ca409b65810af19914165a2b2f3a4716de88a2ea20e08a1c5131be348d835ba4683abcc0c5b6117085f1de8cec61c5cb98d2c9d2092954e8b31b6959a27a368e735b260cd8785",
		"2c657ffb84b7215ca68325680d47216eaca7722916e770660f4e980dcea7dba81cc7201d0de71300db62b27d790a0b4ec810a7650c9842b55008934425888df014547c067eff67ab32f28cf91da611c604e4e11ef0dd520582a500fb046ec1af2980a3f503277f8dca524f88bbf5f1e8742ddf93fc9255a2a48c43b8173920a2",
		"294d196d037f8c15d46017cef02e6dc15d01cdc054e6446db8a9555dd5eaa1ff30067c6419c2623a291e9ae56236b2cec018c13bb82d576b88927fc26f42596628359b8a8652060fc8666eccf647965d3cf6eaa294945c57d4dbd95aab429c3d143a36be62a66ad2f1eab8f3d2992ee671505a097631809c17842a16b295ffac",
		"097d9c3d873813025d204eb4697342e24e0089cea6f95f30d3cd63481f2ead2a0d24ce262384d1f4cdc527b4dc81ca2650efd0805e60e65d2abcd4602cd6b3341b18f71f3608d989ba77ae9eac408d137e7c38d6dd93cf7d5ea962d0bb1c977f0789ae67ae997e7bee9edf04d7a377083f64ff3cfa4a455b9b7de33e77f21851",
		"116598f9e05728473a3bc3726026e09239aa289fa7ee29cfcf8f369b36f6e4701afeb6f8e1ef7f663e87a8acce34ee66a84f2b069ce0d909f77dabc714e953da299fc454c11764ca8572e3e525b676ca22234fa0c453d3dda253728b5f2ce14d08be4640736f7ecf8af5cc887f44bb64202aee54c3813a0277224283507df9de",
		"211e8d324e51ff50471ccd54f7f114c5d8ec3ed7ce6c1ca8984e808779a9c3940adb93739e4b23affdf41a23ad33a99a9575cc85a5ba54fe0e05258181f5a8510b7c3c6e17596b86c0e9fcd712810ef8f349d60fdf083b8c2881b03141a6992c0b6fde3669662f43f753d95599254e9846d644f505a9485ec33cf05313e211db",
		"2a2a18b26234c197464efcf97720869b3fa999a2f5d78f8ee5417d9516cad40105525a1876f2a8c18c939ece3436dbf0e015f37a38d38cee8b079eb820c67e43083f0e8795043c869a6d98029565336b510e0782efa5593f41ec37b8b393534f261a6da462e8bcdf964b144a658a6ca9f6afabefc377789deb1e6e3812a8e824",
		"01bb00045492a3e6a6d1e85ee6e9d2a844130ccbb30ef6cd50437a70e36a54bc0c40b64663607b88ff4bd3e3fbf771750225eab7875ccd58061097c5441a69ba2b904891c3e6642c6b3208c368707cbe3f694897701ebe4a15ebf3906d0d25e91c2acfea2caa417b6aba173fc481ebdfdca81624325215c4d1bdfdaf725f35d9",
		"2c8664baf38cefcf27b18716cff9653cb60209c6ad3c8639173f9c2911fc7ee62f4dc7e55c3de55e18f13a838ac8cd50002c717935dfbf260084ff68fdb2ab9500a1c1a1456ffb062a3a1fee8c4712ef5185db557121256e6cd90938c668b53f0a078ca5a0338d667a408f1a3625116b0b908aff00ca07c45e8f02069852c8bc",
		"054da61ad8f53cdebcc1ff5ab687e6b6065b4729eb12046d99fe2429c120e54a257965d638117eb5b6d35362593ad9de129c6f24246771b5737947e5b8b196cb069d0fa34c264444f9977de8a5251765e5ef3d90268b7bbc40721c7eab10897f0bec512834f971b0005ab603efb12706519e9166b245afdcd6d50e66bce19f21",
		"07f6645458c3538c739463d3ef064f12e39ab5d90d80a17b1c74342f9269bf352ccf4b90dcadb9b754d2205690478800322ee920d96e1b52f12d72ae7086e7c00bcce1848f1b49c303af8603072d0703cee412c7292ab25dcc537d82f6ecd9b127f96740254736aedda33484929f49cf70b468cd9525f5eece7906cdc64f21c1",
		"25cc8ad194655c981e3ea23ad42d14d010f335331a7a78e361914d8df516f5051c10d5045de3fc432860d68c4aa660d32c396179caccb498830a3c2e21f22c290b184de27773b9169601a2f61914e4b25ec7a1c09a0b58fa5b971ac07df213ca0ea1ca6a0f9e71c8e4dc8e48fada67678fee2c9c022877b3de3e2cf763aec3f9",
		"07034d7a6955111532b2b138e25b25a75a4f458c66b4894f80b53c56d5d88ee63058b567a6f555070247f7e33b185c274ccb33d7cb4fa5aea46aabea3cbd98f30bf0b115137b3a5168e4b1a70f48d265c5020d75ac3807ce36c7915bc159280b024232d6811a39bec965c54b975f9230a9dce75fc098dd3a6b813a5c4b4a7f18",
		"09603d8ae1ee9ae2032cbd56cbcbd4d37c734207fb0a53a9100bd9b5b5364e5327ce630b5300402122cc447d761655ec1e2eb804b73b4d086764d528b6613cc62840cac9dcc36e1650f57eb9a12d8dd73f135330cff75669fcc5ad29ae55d253170fdafc9d536cd6fbdfafaab06d772a200a8a8bc662612365bc7d597536df7f",
		"0e622fccabe501f825e2adbf677fa27a7b90a09fc70609571cc87d9757125f2014403524c78b0d97ceabee65a407567805548addc53b493ec8023074768b02ec1f8ba00d0d56bad7f51e478a3404bd038c61662d944d6c4eb63a1a9a10552c4026f57732a6332a91463814bf928a177af8432920293685adf76ee56628d111ae",
		"233585d986a6c7a79909590a5712cd3bd2dc0d299e3b0c9951a31fb0e305ec6d0ed394506760e805ddb2a7a555f6d1f072eb2b7ebb2bb576f550a2d98fcdc2f00368bcb2f703ec7befddc822c9fd1d94ee61bb660b35ba0dc9533644d965280f0d6dfd3a5dd540bc7da06438338f9cdc8c8bf7d66d703d2056206bdb5560e020",
		"0fc7670cdee1ec58e30407920bcf7d04becbc3f1903572d0702e0741dc5daf23065e8a94a3fe98d2d8dbfba901a9e97bf5278726452542d004e054ab7d8492182c191f31bde9ac40e57887bb3385c818434212e838a57b527a814a21dfeb68f42c1676197917618871eb3100c38e763d98730b305c04a210379ff40a2351f351",
		"2ad85d70660c74ee1d10080d07308e93c8b637016c4750a8db0f62fc58e86e741b3ae658711ba5ec2e6d424eced8cd389da879de624e409422d387629d8f745225515435d5cc18eae108dab3001534439f6969d793bd2fab9e48aef16ec86da013fa6f057904c0bd7eed1342dc6ccc7938bebfc4bd161febce973704ed56ff54",
		"080dd01524b05a01aaa7d205ccf19b2f93b87cfe11e2f1a1f3fde8e4accea95717d853e5db63cdc0edda0117c189a522595ed0f1a4de2f18ce48157c89595a412189ed73d233655efbaf6a2b7d54bcb9dc8aa69335bff63d27145d1e7970ec4c0462fe32056275318a208b7c4fee8ea7e358b5e18edf10e47e947312ff4ce13c",
		"2719f9d6715cc2565a692d5f5fcc60a455a9ea20eb6738972b92548b720639600bbfa6888d651c8e236ea5ac630d0a4109a759f37e81465682619efc086dc06e2f4059be68d492ae7ead70cebd6f1686a8d0c2259bd352dba59e20a4eeb2dc1909f4a621cb718436a44e4a31ec93b90e2e4bcf97d1db6f7634ba361d78bf45c8",
		"2869c0089006e213f0a9b5e0b39f82604b89a9dd840e19345be30310b043990e13adea52b6857d8b33ae2b30ffdcb13b7cdadd5e5de324c962e8094bf815477c1ce576c4ac70d7d9a5b7315ee575307e5cd2be7b9c369942eb69a683b86e21f81739a59fba525085a3f66e046d37d01006c23050bdb8048fc8637ec8f69b64c7",
		"2cce9b2418b96dafe01440bf198c821482ebd784e1a9baf9c9e4ad24a3b8d1830b7c3758324fe1264dfe55d5118d2eb7812d69139186a4e03681d88b8011f316185d2da5ac340c4243fa2efaca7400178e5cb2362bb45f5e3bf944230a84a2f70d4dadc62ab808b9610d577a05318438f523be3895bb097b82459e1fd258e3fb",
		"0e18f2d54fbfcf5ecb5148cd177b3fedfe03ab6ef375a210d66c604cca3862fc3013d2dddca5eddc34f8c779c999276c0b23b43ffe07755ad4b97074484acff3181c5ca92c9816f10edfbc7c2fd84f8122c396076064f2f867c43c384f0c8f7b10066c88ec26da330de35a4d00bea8654b5ebf8f50b7d40fa2165d386480da86",
		"0977a762285234d82dd6341e12b50306f2d94172cec42ec984ca164ae65e6862260aa087ab0a5fd3768fc35158fe53f2f07e8f0a33075eb0040cc4e28b14f4b7291adec5a9930136f7834fe296118efb9c8d3a8d871fa0bb14e842a84c1b765b0930ad7085c5aa2d1d24f2c89dac6ef6f8c7121737886d51e4b3c5dd0a25360f",
		"188f7c2bc8754bdf7916e98c91ad88089ddcfd1a1dc9cde6e8a7cb78d60e880d27a3063667f63b483575b92505e34d4c7fc0c90720e4804b54e2cb2a7b6a9ca40ce94c505d0f5f5bffb51cc7c5ac810398dd02ed40494d6865f8cbdd14f4577d17b20bdc12f3b22e8b0f2d1d1f3172d96a55dac8c47a0540326ac5fc2a99ebf7",
		"2a3a23b5b87ee63397218e1aa36c3eb3c27bb37855c25c7353a6c590a9e7fe5513ab255b026989240264027dedff78f4addd47c21e6b40748d8d41b4cbd8cf3d28089b8fa415b3c15e5c25fd9392f4d4eafe6edcd524bf1c96d0a914fd8e348912852ff8137d665036bd110727924d9c5bfd0a86f3040d9a62adef06480925ca",
		"303057f11b8e18e47517b31995503340185242710d27d5d07d96bbdca49123e422187ef151f0ca7bb0ff4b5242a8859e7901a8305dc45710413b1d13648b1fa21884f2189f374a0d245179ecdedfe199a47c21afc60dda2685768b42d57382bc1cef72473ae7cc326636e81d14118a508b54eff28e2497333586f5088c11712b",
		"0e77e96745b18d93bc2fdd355becf04dae7dd1b8e4e1a68bfd731de7b516b851208f527b4c10508dd07caa49a59848a190708337ed0dd4c10507fd96f8b4911925ed682019bbb6ac7f07eeedae42e4fa259c092ee1295366940d0d826de7d8c80fc0cf9972250f016250513563bbf63b0997e8851a6840ae6e4ff57c5ac19786",
		"052589b1074938033feb7ad753985d236e2191a99217f70e02dec4485382311c08d70d3d3e7f142f0a3d87861c14d4cca8cf95f1af12e6557924c3272a3e256c007e7f0ef3532d077daf1a2e992612752e6a7271d8a5ecb758dc02d3b2851665198849eb3c5e7d3c62136b593e69bc91c82c8e002fab0aa80b3c946025dd0409",
		"21f6ec5752e9ee2d17c0d49239ae4b665051a67997fc587da2d92e990b7d923d09b8f25de4ce4f4f8373364a16837b09ed4ee524e3aa8d2c134e1f710b96a69a0aea716a11f032689c056f8976b12ab2f63ad08afb923ccf3dc0556764ae88980279877623dac3cd2a3daa1d871614a1784f85f6348039e3c1fef3874039c850",
		"2ddd7c201548c70352b79e60149645ea4889a2a87da46d4b872596dd0cfba68107d6268b337f2f8e67a777d45090a3bf8dd405af82c75b7efadc4c4abc0b1da022e4aa19ea6ff2f267a18160409ae0fbedc46434fddecea7d3d865bfde36174b229f25945b1df770455d24a5f272938fbee7a250bd21dc3022eef77b20d1d74d",
		"16d844f9cd6b36eb7a8598ac525ae4d76773ab712298b454cbd7d8a77b9078671644c0d7da009c81364dd22dbf3b3b194217051ac4ef1e845ea92f4f15e39daf1e9259e4b7b375009a43211f4ffe9f3ec7869cabf8a2edb775a50223a9b363ee0f4b89ecd6835ad055569ad421c08af2a60184e912ff352b42bf8a46e70a57bf",
		"1819599d67c7155f462e0503f9d7d5d71caff740cd85321cbb4d8b01726a38171a35676cf5d450c675f76d1485d0cb272c2124cf03246c37193d7ec8f7b83f39079c0689a79b17c6eecc34e0dc3b0113e03f8f37146581acde1872e254d7634e2aba1f6b1152d8f19e25250c679ed4c1bda21f22b39f38be792095f061fb284c",
		"0e8496fd8afe16bef40c7924223c68c0bf54d406130c0e3522bbf43308403d7a1d2fe10ba058b0ac2869dea8b399a7433c8c0d9322d20e6513235f71951efb3b23297a5b7d2972e7b77e23b23ddf41e6ebf037972f5cfc6691cf7de4fc7881f61d4008b5b4b157d2ed43bafb38977bdfdac2b322d155f88a01429e43800b461f",
		"2f3edaaf69b0d480996210f3af9c3dc011a60b517b5e32c179e3fa86ed53c78c2aa56584dea96108cf8eeb106ecf0d6b6bb153b68abb843498e6ffb3b26bd6e40d6a62015b3e2960f2dfd39e7526994c785b4ec84c717ebcaf3e7c2b51b8bbbe26722da1c8c2f380fe97a84e09fb2ff7e29954568f31a7b9251652eb2d523563",
		"0c6073c0dd07d94d4a5dbc8facef497bbb8527307f8310747e3eb6577c9a80b023383757cde5477dc97df2f1fd80f7042bcadfd4a70ea21aaad10d18558cdfb809fba59251b88e2a5aebb6ceb9be70bcdbf9207a5251d0eef387bae06f3465bd01b7e14a109548b6836fda97e0f8538ac25e41e04ea4ae151c05e9ce1cdf152e",
		"00a66c538ee9cb76acaa1ab31bf84d58735634bd8798541e4b0a39cf784248f00603da13b97d1322340b5aeb19fe15f33e0f7702b4fb830d59de7df3173c064021900dcb8bbb7efe416554871f3dc6a62faec201b683edf96401c1d598d244d50c6b316b69d8300bc9ce4ba56a2e4de62293b7d48f373f45e4cf29aa69780d3c",
		"1b830f498103cecd4f5a0bb1bf815bcfcbe8c46834a4f74049d552217a15f7121861e80f0b80778d7ab5843c953a2cb9da34a9a5b81fa53556c36199443fc1e4295dbbb2e3be90f26c7d69f599c6b9ee74d9d0086fb7ada6015a0a12a3ac18141ca1188580a24ad5043327aa1233157ed3d8e2882b67cab1577f7fa14d73c218",
		"0c1713c396bbc4f0b45e8c0952284c1715a4525a60597a2a6ee31582b10c0dac00c4c2e8dd81d7112e07113a081186ef47cb0624ac7aa9281f2f3790af59a2ec2fd8efba52bdd6f558a7bbd3357c18d637c6afa19cb679d01f0e66d13250cec00e0b44a179670a32b394db9fe5593e259540564b099eb1ab9e4db639c4b385f5",
		"2ba51a9c4f9a71288d744928691227a58fc48e5e271058f5167465339edb2480043ddc997a27171b297d66de2513b92610c81e6beca264720d3087f1e90680dc183df1b44f645a7bb257f21d513860fbf12c7ecd8e1635635d4660688f462c40104a86c66dedd1f4eb7645d2da0afec3b6324847f8aa15238ed3a889ac27b00a",
		"0e0176645d7cf3d3e9763e34a8288c5cb3d18037e1a0bdcfe5fe93773d1fec8c017e2ad6705df3a11a1706dbb20086ba2838b48dbe482bf5f05e6fe6e01236ea0623bff866d85ac1f18a031a76baec7b8bab7acbb54d49f4730d01e5f787d70f1b2616a552d2c1385cd1e48ba7ffffc47bb18e6e22218cc9b42997135226d57b",
		"08a3faa1bc521fac71124907a639fbfe67967c1c8e58edd444c346ecdfcfd345291e1f87028930f6a1f67e36888f7b6f769f93ac49becfe0d7cd2ee3ced4390e0e1d5d5e888b51e017fa68c39d2ecf30aac1ccb8be79aa36899a8e001f4f3ffa270b856de509130135ffa9a7f43af1b23f192aff7b7d3da0986cdc0b1684b45b",
		"2d5377e37d8629b820185eb0fc9286c367c87a1392346851b58b84c8558a871c10fd76a0a1c6c985648388a52719f89b79878e5462b63b7dcb59889973869fde116d8d6c72399be4b9ee48de4ab8c0c878f14e49ae5556550a9d68acd96661010e5bb66afad206bf9b8870a450f026a21e54b51ec6c5ef6669ddfdd756848b34",
		"0354490c13e5a9b670a4b1fa18550f7def34b5eb5cc2b0fc67f45c7b8e0e5e1830278010094ea70ee34fc3fd73365c815ba9102b8cbc414d676d9b4dcdfac7c6083e17b863771ad8078f824765a52cfc795ed4a7609f63df806d186b13d6774415c00de4c3c394a0d61d7b78f421aaf913b96df71ee480add10eab01e5e82863",
		"07b35e0136a1e91442211358eab49e208497d517f8dcd61531964dab4bab8fb018ecd9466356fd69acb344d0946c89f8f381a969b6f41ef9c728db4e68dac49e28c5cdd39ce3f036beeaf9bd83674719fa84f4f785e57c3c14cea0e1b4ec7c29285e907bdf6ed6ea18b4f9a99c227f8696ab56c96cd04dbfa34cabd1d5520468",
		"2666c442a434d862002afa28a6ed05d3e7ce5f0b7aaba48b0e4a12a7de6174fd24b5b661a5399871f8d64a628fce3621d6d87edc448348f906a6346b236331841fbddd6525cd1dad90a509d9da2bde9e304d8ec19fcb7b5f77d1abdae83f0a891ae7d06ff56f95cba36dbbd7a079415a3afe0174c9a4c759d264550d97a64ced",
		"1ff145e4eae818224c361f70e0df8e99d3d308e9244efe08e196922e8b148a282ec3b42eb7b5c853771d4ed9e170e522beb978c4d8ad98da3b49c4297c6b792713ca4fc91a37e3354b7ed076c245386a62d022e9f3c2c10c7a01f26ae4e2c6ab0a26d8075b9b04ad541254e2ce5118267f855872b8929531a98c50a57c3c493e",
		"1406d77b813d8bd2017a8d35ec7d8461e9a5f2f94ec46c09dbf734fce6741d3528f2073d151971eb3028291b84b76551d2ab3857270596503c168ecfa32e6d5e2f7ea77378d31950be00f37711c073a854352be2a50e193f32b260c301fe4f843026c43107a2966118c853dbdd8136775052b7487f110e9f50078dc009183922",
		"1409f8e56b277a404c7f5d5c3ab55e63959d4bc67137da965045aad3681729522c02195bff58d7056bc4ed1b14af95f94f3cf4652df9819ac989a980d7e64ae11a032ffea209531da4e1bb6cfd74cafa4d00e056e535a4179a95f1c22f7525d312f546cac8e0ec94b7e87c6d41a4ba49f8ec18ddb65b10e099f6e87e1ce62213",
		"1cd361b83efdfdce899f145132b01aee031fc6d82377805d5266084efd78571615fb40dfaf7fb9b3a82fffbb0fa179561180f62c14ca54a0d6e1322123a719ac23ecec4ea1be1101da93f66797d53b9984b42553e6df7e1731a97b58946807c01f63420ea358258de9db594732c55b9d2b271a8cca6619c71cef792f0d33fe72",
		"0e5140bccaf30a2de9ea7e4cefe259825d764694f8625f074268f98aa94051782020b2f5b3532e1c1245c43dbda5ab0e31ece3ac5a8512602593c89b2d9639ca2e422289e032ed6d2a4b41ee9589341342a35a3c5beae5a2c57765e8132f441d1458f42b93acb04782b63c1a15425532591ca5819e2699e5e08f0aef32fe1c9f",
		"21fc27bd0cb91d7a04826077b02ac8f1844b35d5cd7a100605b14d20117fc472287508a6a7fd532dcb3d136884cacb719f06fb604ff2669823ce81d6a4888d4d01fe53148f2d26e369774dcdfbc8ce0cfdb64e9f87a47c3dce106212137cd2c92aaf13ae23462e97d59aa76200a1dfd0af84bb99796e0fdfadc96d9b4dd1659e",
		"2f49ecbca41bb9af5d22cfce0b56e61453f9619b95628a4eb2bfe414a8b5717e217873078750c673c576c85f81176620fd75f54ed4aba8820b15bd65471ec8bc03581fe0823751a66e3f5217f83f0aee2b5b8c8963f7dc05d530b9dc107f18c02d17273bc5362f9bfbac151dee13747db4c4dbba29481d534a45d9de3534aa11",
		"2802dbca6e7ee29a47f798c0cf67457b1b6a3a7dee0f5d1042c5672cde7252c60b9b50fe4389af97aade7a4b746c65922bd9f54e9a83df4d19aaa4e1f70ebd5d2e4053f54b57b8b27d10cee37bb98fd38b3ad1a215778a6d0fb1d9ae778b0c101874f47ce28325e16ed11a3f2945c97e0a06f36d7f8de5b9a9c38d3e8f5a322e",
		"1e89f3f9c593acd32ab52c833fb2ad0b7ebf7f9420bf5b200f24a00aa8adab0a0a5c6f8d082d3f443b06c72f3f06bfb28643b493fd0c29d815e1800ae9c15fd128b1e29891bc8854cedce7168eab687f37fc1c6eae1e043a5eff64c39e0765481b36f3ed21806edec2a2408716e184d71bd32da9073d6def473dc2d7fd10a3c6",
		"2820914ca6f26bda6aa03c82c9d1a7ae2b9df4745ceb612549f731e0136ee49e063e1460b8076625afaeef94fd8f9c5a4a6e350ab6fb83725de723c3d885c536129e97b88207c91188b1747e4947eb5cff11ef2085bdcf5167f7b70bdf5ed36628c4a6b06343ff27ead69d9119b8c1039725eb6eb4bf4ec94252b8f8dbdaa3b9",
		"0cd88bba967912b784956bb990c69292aa46f6d0343cc8d85bcec4c603bdb74a11d873eff6111d0ca4cf6f690d724d77bb754de44e755ca6c117a831d68b6c4b0323b9e69b582e2b010677261cba555bdc0a140b25cdc40f40aff1712e594e55120a5c50ca3d93444372cbd05a0e9d0ad611d2d272148b6e3c391fa5b4ce840a",
		"2f35fc21f10a9d4999146f1a3507e0c44b828743cb0399ea5389f50524ff6b8417d98ed283c1476b99d9069d34766e83dd1d4abd430d6097e6b6884d7253aa231580f1a578ea464d519a1766e0c3dc7ef22db43948e8957648addad32c4bbb14109908eee55f2e474c21902a53dbf1d4f8985d793b9b70dc22353b532e52a384",
		"13e854875bdd302b0543544412adf3cb36a3718937ba85bc65fb6598bf405fb727547c7f602e27308a2325da90cac2360ed560e16b979ce5e70b7909d3cd78f329dd315be091e68c10812ae17f5b3876112ba5c69883a5887a29c08d83d84321288fbb6f7e63669391ffb5cae891bdb8f12a4122fafde35857aa7010b0321f3d",
		"155b80fe477c25ba3bad5056c97a19c0c0b8975f536cdc47f3294a05d3d7db8d0d55f54bc084f756c0e77ee3e81a863e0c64834b9f0bd0ea09412b75d74f5be51975144612ae0f7cdaa2fcd692499b94a127f617d94953401a54421e224b329e0a91a422abcee02a577c6a150d4605aaafc3d304cd29a402f768728d84b43da1",
		"2c95c4613309a80bee4caab9741e55af36ba9eccdab17406c21b510ee231efc2261cba98d418e88ccf3c2fda851a930097038c47b23780416bb37912d8f61dae26e45c967bef8d66fb6e6c7348d6e3af3d7af0d4e44e950fb50d7a935214ddd8081ea1be7d50c33163ca2851c3e415fdbbd1df8ba768ee911074387b8b181053",
		"0629ac70da80d114959006741fb9782cb716bb57e6e540f617870d45cbd956631ea455949348bac2395d4e38c3349cd1088b85c50c0bba620bee43ba36e54c3617967fb79cf3f5debc5ae622e5d43b552a1acab1bf50f74dd76c376d275798bd2883fd87c79677735c105e492ade8a3a2373d237fac68f84637f55391c31c716",
		"213ced0c1d86582030e77c7bb98c295bdd13d24790b3743b100d29d4dd11d73d0e28824e1454a02085fd216e01914241adc361a25a284d37d280656e52e011fd1dae4bde2a8749ea04a0c34511429fadaf26320c434ff4833ae844bc4880679b201696c2938203aeaf0dc479923586cc857b95919afe01adea57197cad1f9242",
		"1a8d4cd55950b7cd22b087a73f45745fe90004299b02977df1bb36f9e6312fc31c4bf2a806bec9d8f1494420b80382340a0a7cf78acd108a9f71ee80d878c21423bc10afce6b8829b887173618192441406fdcab0cbe2c4badb76a1fb718ea4f2de2fb09f2e3d205ef3521c33cd0f2f66e688b1594d9ced27789d4a1b5a2901a",
		"1e89200d91a505756ed884efbeb72545f863942fb512fad4012426a7a2a4c77b20f421e408ca70ed8cc00b01722ed1110780f9f77cb8681574d3e6c48b6bd13507d4238db15f382b209989c4cfc3619fa68c39e4ab77732e196db5a2139d62a823db807d28dbcf61be344b3e31fbd293522152ba64cdfaaeea635fb38f41c386",
		"16fd2dc00ecd4d5d64583dd016623e184b08aecfa3947eb9902903acf9e966402144befe05567bee46fae94560c0e916adde6f0cbdc4823cec6b7d277045739316a1e4c2cef06c480911113b0725da9fd17ba79a259ed74d38f5371a208fcb8c1195a37803950074bfa2fc7efd8f8602d1719ce03447ed287b8beb9cec9633bc",
		"1914eac24c6f713b64a4da8d3e9766f9f83cfad391184e3408ae013b3899abbe09e43bf7fe17fb716a0414be9f4ba01aa1fe1a67a93f365f24096b52d0d405eb215e3d0934b3e46502d4e840448beaa348a056ae37234f7013986ce1264dc7ac2d715b6e02217e853e27bc0242bffa03bdfcb84d69a71656900de6ea1196e2ce",
		"089a54fb2c5a9c2bb6de74ca1b53f00314b16f77e68d89417401631db397101212717376c241c9530116b0aeacca62b15ae389c5f11e1cdd3355ebf0b17741660f8ecb18fe0a3bdd788cd9717aa6ba5f2f645b7cd116409b226b42f0ce83f9c80ee588800df9414f34665a5719394cc853c5ea3349cbc335a67afbf662cf1d8c",
		"199b5a8c038e637dae6ba336ea875f4ac77ec9d49669fbc301d6d1e49f5337741086e1943e3d153c5f616f8fad73fb437546c7eeb3886759fd2267a1e0be5fa11939eec09152f396f4d92d22adf987a2fb5f0b3e94704b90cf0ab19f2922076707cfee055e76e123cb1dd40e16c8abb203beaac73503eebe8237021aa49912ed",
		"0f10079a7202362668edb251a5758b3a2b74db8425351b32fbb82fd15fe16a8c2b69181182bf1cef779d462a9c985e97068f8c9c5403664d25e012270da26195239ab8323a791763ff855ac4cdf6f15863695ffe4d39ad85decc129fe626aa7a0e9786826b9d0a457119801f83c14ddc9f5929b48cd248c3ad2763b126e82a75",
		"240b40489f5e978f272e9b9434be6dc09dcc01c94ba60408b88ae37e43e1aad6209d63cd5397579bc0b83966e82c0ed8a38a2f786eddfe3080e5ee318a17ae2427859fb2579c1078e74ace1b38363cd6a50c173483f5429a383328c833b23da1240baac3738b03e80bb974056bf297a3c3127ef8546bb5b28d22a0bb8ca42f9a",
		"2cad5420d72f2495cdcc0bc33b7bc8f290910635acdce7c40554ee99072fde06021d0cc23f6d5336b266ebc0ad519f73f7f74dc466184b8d2d6e1974ad73378b007543a83d58301ddccb1aae5dbdf4154474019ff6250d87678d6574cda572e80542e47a60775c98845e84fa3758df3e6746484ad090688e662380775c6d0e58",
		"1c8e6415119dabd43b4135e9f37f1b66acc79d65fcdba4177033970b653ef3dc0580d5f5ca168e90e01853cbc7a842693547ef9f81afc0a13a47324d02484a1b29ea08de1b34e38b203c5d5d2ae7b48fd0dbd7c92741252a7901edeed17b186e0330614f7716d450f850f2a35ca95bca664e556e914723ad27148df934e6d7f3",
		"0d1de288944896f79847a9653f36d5f64ecfb23c8311c2ce7e060c7641466d6a21c1f2f682196460aa8bb30c24e9d2db7393873a9a6eb265ba65c1fe2c81cc8a06c2735797674d77d666ce8f9a0806a367c45d68256544e9da23c10c3e4764e21d916ca4a14883b136d2c89ff81f491ba4c2b2ef3002a2f1195678e30f453360",
		"0d83585cc31553ad59c5df85561729bb5e2dc1e621773103d45efcaa0228a52324176aa8a3d63a9f47e5f3faa97c1df3448897c9e5306b0390bb01ec2d180a5019c888a8f1657b09813f39e3b95b8ace7c1e03befd037f88fdcce3d24cd8323e2349f7d80fb43c6610c82265cce9f9b4a1202e87c65751bb04d3dfa979d28d2f",
		"0b65cf9bd0958f2e5bb64ac714f23e7e6ecb5527a594d2a85911f17d8c5675aa132d1e4ecd9ef0eb38bfe6234c7570bf7e0d2fa5f9408fe16c05a2502db8cc38123ca247d87263f7651dca62cec967e1410f49dba0818d4ca91d2dfedc7dc7eb07a17acddd050dbd194ddee8c8908e781586d333e7667efa3bc9d2aa2f3cc518",
		"14da197a8df445a229b276f950fd71921eb69d7e24b77736801c78ee160705172e90c2bebe20506a0e66803601cd039e39e9916e76d96c933601c922787104780d132b5eb896d29f1348a0a43d010f8b04aee7bf1d811484188e89303fa09fee2b8fd5e00351008662dfb3331160d6c478ab9236449bcabe8a5ace24324faa7f",
		"0c5cd0bfb87db6cf10793b3e81bab4ac64212342eebb7cb2f0ed3c21d3cf34d81693dc9f8c673161154160807516a7e8a5ab0fbfa8a5abd21d47abbbc0a91d7d2b5117197f924213ea1b014794415883d3a90e6a9e350d603966d4d13c275734083ff1fe034487d22289af8eef62d65eaf868cff59dd091d06a6f4bfa36ce289",
		"01b393667877bf37970ef7889c6aa70d976824f618c386fd0e3ae59c3c1188db2bfba956f0ab93e58642df1c063e3635f2eacdeffbb3e8444d673a55a0e7bd8f2db921be64f41a8bca6b6463958b672da8ae7d30860a1509182061372571683e1c60e123f27ab35979a8b076cb4b1bc3c0c5ff816fa453b96facd8bdd27847a7",
		"041d0776c35611d342c29fa4d3e6b8f365a7d51a7d58d6d5a75b721dae445ce8003ec035e6b9c7e4187b48e6075792fa26f81ad79ba019eb6c1f67b452743ec22b0a7803b52c40609f85f2552cac1a02ff56990ec92468af0cb92978a2817452108ce25e9ccfd41d40fdf693a110547c774fc997fb5f1945b208fd04101f8764",
		"0edb2455e2b9885a66f61c4d230a970e215fa868115f49f7b26efd06ae71815c0bd0b10b9530e4c58a7037f846558324857aad62b3398919b81be901f94e01611747fc952002e364260bcb8beff6e8dbdd4e506da6507b148b1e33a72adcef7c1a17a88f5596b94327681452bc8b05d4476c6ec26ea5b7dbd2f97d7564aedce3",
		"1ee8e5bf74495e32e16f051a8553febe2795d3ac570b0e4114ec5e66c9bbc2b72b2f1d088f070f2de424743ea69d682c160c751b75adb8521bfcf96b194d40fe12fb7651ffd710c2a937825a1e664dcc03121a372d45d5b73e96c97dfd81a3590c7a7f74f06ef5b000df47e37a59dc38932f5c9bd0d7b58ceea4616581bb2ca7",
		"0c08c33fddda81f7b93cd2e92074d9c20b91f5c156fb895f65d2854f16e794031de67299d1e096c16714ec79e65eb07846d4a60ba21e2a56c3ae256e3aa6d2e32fa39ff8ea6be509f27aea5ab5fc13373d3ae2cb8e7c4570fa0b75a47ddb53331fce724967610b1a6fe3d42e7e1798b4f58186a720d4a3882e9d8641b32ee302",
		"2d1a5469e185f3d7638a216eef51b5c9546c212f79bcd3f37527cac87e764dba07cdc5db28483c685459938a522f1d8ac72b223231d3b1c9f6a3a0e66b1983d22542e9774e2ad524ea14de409e8812d3e5599fa8ce81a7f614cfef973f0779ab0d77cd530554958634e968fa5b2161df4a70a7f614ed74bfe7738ae34d9e9fea",
		"2732af0de32f60b8a1ed7b490adbb9d2babf6513019db2702aad54b34e46417708f8decda98ef1cc4248fd3d4806b5ed895c6b0b962b5cb6d46e6feb8e9f5abf2fa0a824fb02d5f8fb628839edd4b916e61688731f9ddbe3a61272c986b426b500e47c39e15389295033d92074901f8fc3667466846b97a7b0d26172f54318b4",
		"0da776a57c194e8315e938bf989130166df6420630910f55206ed99e3d91d66b015f7110b4624c962c5436c5cfd9b87bb274e9ed62494f794d196903000ecd8c15313bfcc74baf7862555f77f7688a534559724ce9c7183015c4613a134a64d000bbea1c3a0b8507f22128fe032e548014e9f604f6c6cdd8986f6a80622be7f7",
		"0ab3180019a2a56fd9638d70e32adbbcb2a3ca7f1318ac3fcbb85e0ec04c25ca23669cb8e0ca1b29d4fdb91fb472e3bb98fe94f916ceda56a383ebf980c2b993064d36084c3ef0eb52e07d4428f45af0356869cc245266bd8fbe613e99c7723d0056a6bca0c78bb28e6d8e15e9082a6d6e9ff973e835aa37b75fde82c79c232a",
		"0c0a2726fbc82010da925bf02df05b4ea41dd5415e9affe744eaadc7e326aaae1edff13c5ce14f222d997a7c36a0320eeca605e8a9f3ecc9c10d7db1d1502cb02baa1a829e6624f84ba986374e8e3449c58773d18e09c3595dfcd4255c9b5d5c11d5643c93f803f01e236f496f4a5db5a5437415f99accf2d28b246c9ad33364",
		"0878ae441a62b96ae7a8d0359c53a60756d119d568b12d00a9146f1ae83050aa0238bfac88a6fd82830a6b94a0a18fda88f36e38b87869b3eddb1ee2ecbdf9480c1a09ea6c84f85197ade473672a08d6a76e83a49f2ecbd4b25cb924f01f408406d8975407020c3f16cb6ca86c5f2abe0eeabcbc07ea6f46003db135798eb3bd",
		"110c7fbb95f675298dc63c0fcc117d502c8ca8aab6391a421f8cf1aca25a29c010b725671a2e161c7870072f1bd31beeec58fbe7a4e1fde2798abff7d729ed5e013e8206093ed0492ef52aa2527b22d8eef418210685494eede45231a30346ad14034b86e49f3d4e87d4febca0840bf89fa1dcfcfe322986fd63bc829ee6b189",
		"25d1e34e8a8c4b8b8d31f9ea0a5b384d5281cde7f0277838058b1d228a85b4c31515d911c1be7c6c151d92f90d820da9fdef3fe18fbfb549552ef425db5431fd0d655b219ef48707d6651d684b570930739272ff4bb31d9d30a6236cc7570b8902641c77388698c024de0669f332b00d15ef0762a0475eeff95ab240d675d26d",
		"2862a3a5f38b3f266c34a60c9811e423ad709a56a1d59636b0934afb2dc383b8243ce20e463ec6e8fbde2b9bd66f6e7f517b8210c770bdc6e28ff468982d6c71150dd73171c495a008dc609cbb3b4c00262bae4c120cac37cf9c4b5339e39fa3146390b115f16c72a5f37bdb5b2134f056afa4ed02b8b7a8ef60d1a7eace10ab",
		"0088a90af732be47d8cb4e2c15159124e4ad5a62951b4da64b605a2c4b44b68623aedf1dad8b5848b7ceeaea109153ea28563cfbcba7d3e75007b370b00dea4d24cc8d8864df07802e988308b8b2860ef621577176e1557b306ebbc6596f600029413a6d26bfcfda96f62f959dc4e5eeeafa304be77927f05997ad0799233884",
		"2030754f40ba9b807c4ac5bd6817960b37ea6220277d278ad5b337c09863e837040c8929985d54115fc684cc16ab57add0c438ca688a84e282ebd7663218d2ce2fb286e9ad2bcb6ee9d8d6e24202cc411c5bb46c643e6580275242746d30341a0846713f4336ad7a53bff02cb1a8b1ebdf29766d338ff38a830d22bc233424fd",
		"1120e573bcaeb6b38eacc02a966309e2bd2e57ff12d05ed947b677deb14ee01e059706255f3bd427d1c3ebce22352874e6b72c66ec4988ec7c09b3804bc924f80759660ad4ee481644bdead7ac110b5e8bb9f4a0175e785b18a0366d1c9d1c38077cc311794a4ceed74d6855592b11b57366afb0190b3c15f0e81fa16fe8313a",
		"17909d62d48b0c0897cb03495fb23e8b4b10a99de59b9679dbe94c1514dc45251ad13e593559ef6a1d7698841dcfc5bef69d22cbd3311c9e7d52dd11e738789c1ee252d166a0070950359116522925533456b38d2cdb19681140bf83580d1ffd052cc8c9fe2d094693b1c0b8d098ed79d47f7eba7a2553eaa1bc645990f6c781",
		"02058ef913c3f0a28afc915efffa9448baf8d12c369048c03fbe3fccea347db317342fcff467f78560c512944b3f8f4c8374f904bbe943e65dc05594f2d5167010cb32a2335371cce96e92831fe5836175ea9f362e918a6edeb7d2e846792dde0ba06d55dee53000f40834c5cbcce6354e77d54e134ea16d36dffb6490f632e0",
		"17b33017c92219f64d88445b9fcb2028780ad5e0b5892d7abd9760ae48b65a1709acc957915053483bd3e5e0525c155186fbd1cc222838a692d1a7ea6ebe998a0fc11fcfdb7786c3565c54a0237792576e564fe6d98290482d4e0afe3c7475e20881b4c9f09c83d2e0223f7a88fae20c65100a8b51bb9f5de7287a3382938c48",
		"1e036130416aa78c4cb9281d14c683c5654cb82224d28f47577b304ebbee72bb07a2fb958b8c8345741b1b843753eca1940106d19d6bb7361ffbc0724f4fd1f415b6335f0ea7e13d9277309ea05d9f8d6fb9694961164f537cbf4f2b7608ab6d0f84f01c559c81d9ea44b9d7acb81024708d77e3abf293a5a54e19aa6c73bd96",
		"1d0bd491372a67406bba5a90c60b1f1526f6a395d3500de61b55af92ea262dfe1a2956ce65ed3bfe88a1783a515dcfc06ee5a14a651ea247c2bd452d0cd46b66106e4123eaf3081f96fdaf982b16806534dcdc72b535cb0677dad8336fdc58a32d8c70f0dfd7146e14e348b5514010fd4c0f7b69b7a7ab7724f02910eae0db2c",
		"2952ed1f18364318b6f7fcfea804a2cbb133c526b78ea2c8cefe24adf00329c7104a0e432c041d1ee6d168db090df13fd924481be822479f105fc210e2f65c7a3026005ed8a2f5ce7c388c5d6d5c1607083c84a840619d3b5756462a24d7a321281c24ab6b9af0f0b2ac54deb49770fe844116f64e405c18967ce4b3ff57db83",
		"0d00bc08347d8882aa9930fe871a10645047e92b94af874c15df451686033f7e2142e7e7f704fa5711bf48fa3b4abafe76b79ff02a87fd35fc6c2da894665eba1216e9efc3382379d93bc43ea694d4491c147818d14e8e22ac36d896b6705a0e21d56d00a24a1a2eb58e14d1cf56d728719915b967291bc611f6fb9cf706ada2",
		"2906ec0c218f69e75c8d5aa598a190965e534cefc639da9f67189a1afaa3702c14dc7b7240fd5684f5eba1ce245d90bf5eef334b7f0d9d26c5d79bb779bc8b3417d9fa33590c4d345067ba41290755093ddab631d63d3434a20bc616eb4fe26d267a751c91af1f5817e43ee4ddaca14822b6334664626fc3538e51b8c410260a",
		"025b545fdb111001827d763503de2245359ca1e7aa2d73d8116f11dda157094919f590979203e1513c67b43354bc69cc3f63e858849395c2e9f7520a290fc0ac279ddcb03c77eb78ca266b7f8dcc774172fc3d67b7b04c54f81277fc3e360d09064a7ff7a95f84f86787a2339b9d1e0e2eb95314b1cc3a42c33353c2f55de4ef",
		"0cfd3068da8de12184e145a59b40bdd3a599f39183366b4768792ee5f0394651101056dc83c8cdc824b207c718aecb94731ac1276c0094481ad896ca485cf1072421e38c534c78de307c7107aadfccd980f8d1ceb0a9d4c9ea1f763c1adc64782be7ccf7b2e1d34e1d7aeeff6e9843664b5263ca30d62ed741cbeb1c33bacbd5",
		"1a608b1107cd7ff25e7590a4c28bda3ca080125eeaaef4e727bc1146f51c5c140cb7092ff57e15187f91c11c88f77742cc510e49b0b71212cd914828da30bad70b38ef753cd12e8bee5977777b6579baeccafa87cbe799d4ec3dea0ff25177c32562f95337a5173f303850d4f84e9e1063f5975685311a0d0cb103b3377c9c3a",
		"2ee4e9c941b4c1be7d8aa57285784a11531a05f44341ba9d5e4fb86712da88af11aa2674bdcfa92e568a4f94c292b9a796756f56e43316cb31290ee15db55c550a2a163d38e52031f2387aae92750f8189f2f4c8a035b1b111dd8f1a150b5e521495abf960582626e2e978ab60accf4c6973e76a934e2b944cf7e6ab03c0dd4b",
		"1fc084bd42fc6da211e69d1d0572fd13dba21dd099a60f38bac2a4c83a0ccc1a30141ef499830adb74f787cf908f9f4219875e7e0db22e57872b1742b2b444f71c2771100dde8c1faeecd55cc6b3cd989092d1ad1f67f5eb9a9f041e9e4304c82b7d8566c325692aa799b201fd32858c1f2a82731edccf15a1201645fe9c1307",
		"07615fb7a3dec01df4d77b48f8e5dc17d8c230258087ce3d18a37085db86408f27a7755ea347e5042940ce5ce23282a1229ae4db5282a43d36a15e1e406cab83022cae7340d0a4ba406a2afccc2c64cc0b45be221b222a8d7f22731016ee22930a3c5963bf2874456168cb78008e96c4883c82556b6911fc9ecfe925b4a7bce0",
		"0d2c4a37926db7ff3b5520bade8a4a8c76e52731447321f6780e9e0c5aa908df2d576e4be14809ed4aa40f4a73b42545801bffa1108415c78d9125e389b0fa9c2503ae421906e53e2b2107ce4605f89725cf71faddcbfb687b311eda792262e92f0d803d20794f42a6d1a1bd2a8c55e4bf5d604a5f411e192afa579c560518c0",
		"0930f46ffcd2c7dba876fb2366d70d69e1f92dd3d1eac1de9434b12fb90835d42cc4cc22f5a2f81dc5c0bb5e441addff42f4be8639425279898a8cd1d2d9614b2cab80be42de5347a896bddaf62bef4a0c31d3000520a97786663c21991a46642d45867547220d74c4660d041179ee8d5ecfef1c141b803bdbdc7970aaf4054f",
		"1737be48dc71948834fb5f6adfe662e6ca83bee00683a7cbef5801bd8cb92ee21384fdbdd6f0413b73b0070a21014fbbe31c7295378ed37a9b766aec3a00144412b6a664189e47b9feed667c565decf726d754611bbcc891bbf4e0f632e638522f2138ed2e22776590e91e3c7c0de516d378fb4fd0fc2fa4a35de0edc222f3b5",
		"178ea12bc9e398069d0d0d4309ba63c1915cad1e3ed56e88229c6ba970ed588314b7f45fed1236aaf4f82d99a4968e4fa68903a5b2b9268c7838ca22ffa637a81e34abbd7e52526d42efa04e19053bf9ef5ac29740d04a3a55104588420e62b8149fdcf16ef94164b4430ddf6ae885f11fab60836a64bfbc3947e1a9d5c6a221",
		"25dc2dfd91ebd36181daad5ee368536ec10373b2bf07fd25c92a7a35dc7148d0037ae0e5796e87bb954a5d36421ac839dec6b6eb650da2b075e19298667c647008d01b7a4260cdcfddf90a0fed34964f9ba3f30222d6920ccb600fab343fa68a26b64877e1d8b1a971e5fc9df43258937966fe223a7fc784aef2dc38bfc4e9de",
		"2e0cb13f6412f57446097b12fb64d980bed36f1d759a8b69d4e2aab21830cb85271ae3e9c9521844766275a86c1dcbf546a32bb27ce78ffa4a2bd753a7152c1b066dbb3a24730890c0fc94865ccea15fdf271fdf950d8f2cc540037df31b90b50c951962e2f70d59acfa2a8c3953741b95947d125ba61e68b9519cc4574f52ab",
		"2f8c87adee51e372f083da93ca71ff9cafade645255a76dba1b51fa6aa68a99706859d99c865f77f9f06d6bf33c072d94e10c7fb89eb8ec8529dc138c69a613f2dcfb00e19bebb464478099e602d5a0c5e0094e2664fe9c424d2b2fee7f3be950c8891a1e29ae1ff33a6e334674d0b967fa53c2efe75d2a4c16319f15eed356b",
		"133c24baf3d55e247109c8ddc0a876aab61a53fde6ab99a7a802421618b4fec5020ad235e59c42f723fecb3b330e34b7be89b56dba7c13dc1786d175c4507d81257696df80e0a84affbf6d604657ca1a8370b30c378faea738f2b3120863b9902f6b2a705b734fe09166cdb804bbee4b351a638f0c275651262e38ca0cbdb7cd",
	}
	if count > 128 {
		panic("too much...")
	}
	data := [][]byte{}
	for i := 0; i < count; i++ {
		data0, err := hex.DecodeString(strBlsPub[i])
		if err != nil {
			fmt.Println(err)
			panic("---")
		}
		data = append(data, data0)
	}
	//for _, str := range strBlsPub {
	//	data0, err := hex.DecodeString(str)
	//	if err != nil {
	//		fmt.Println(err)
	//		panic("---")
	//	}
	//	data = append(data, data0)
	//}
	return data[0:count]
}
func toString(values [][]uint64) [][]string {
	strs := make([][]string, len(values))
	for i, v := range values {
		strs[i] = make([]string, len(v))
		for j, v0 := range v {
			strs[i][j] = strconv.FormatUint(v0, 10)
		}
	}
	return strs
}
func toString2(values [][][][]uint64) [][][][]string {
	strs := make([][][][]string, len(values))
	for i0, v0 := range values {
		strs[i0] = make([][][]string, len(v0))
		for i1, v1 := range v0 {
			strs[i0][i1] = make([][]string, len(v1))
			for i2, v2 := range v1 {
				strs[i0][i1][i2] = make([]string, len(v2))
				for i3, v3 := range v2 {
					strs[i0][i1][i2][i3] = strconv.FormatUint(v3, 10)
				}
			}
		}
	}
	return strs
}
func toBlockNumArg(number *big.Int) string {
	if number == nil {
		return "latest"
	}
	pending := big.NewInt(-1)
	if number.Cmp(pending) == 0 {
		return "pending"
	}
	return hexutil.EncodeBig(number)
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////
func clearTopThreeBits(num *big.Int) *big.Int {
	mask := new(big.Int)
	mask, ok := mask.SetString("1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", 16)
	if !ok {
		fmt.Println("err......")
	}
	num.And(num, mask)
	return num
}
func padTo32Bytes(data []byte) []byte {
	paddingSize := 32 - len(data)
	if paddingSize <= 0 {
		return data
	}
	paddedData := make([]byte, 32)
	copy(paddedData[paddingSize:], data)
	return paddedData
}
func handle32Bytes(data []byte) []uint64 {
	// reverse the data
	bitsData := bytesToBitSlice(data)
	return bitSliceToUint64(reverseBytes(bitsData))
}
func bytesToBitSlice(data []byte) []uint8 {
	bitSlice := make([]uint8, len(data)*8)
	for i, b := range data {
		for j := 0; j < 8; j++ {
			if (b & (1 << uint(7-j))) != 0 {
				bitSlice[i*8+j] = 1
			} else {
				bitSlice[i*8+j] = 0
			}
			//fmt.Print(int(bitSlice[i*8+j]))
		}
		//fmt.Println("")
	}
	return bitSlice
}
func bitSliceToUint64(bitData []uint8) []uint64 {
	values := make([]uint64, 6)

	for i := 0; i < 6; i++ {
		start := i * 43
		end := start + 43

		bitSlice := make([]byte, 8)
		for j := start; j < end; j++ {
			if j < len(bitData) && bitData[j] == 1 {
				bitSlice[(j-start)/8] |= 1 << uint((j-start)%8)
			}
		}
		//for n := 0; n < len(bitSlice) && n < 5; n++ {
		//	bitSlice[n] = reverseByte(bitSlice[n])
		//}
		//fmt.Println(bitSlice)
		values[i] = binary.LittleEndian.Uint64(bitSlice)
	}
	return values
}
func reverseByte(value0 byte) byte {
	reversed := byte(0)
	for i := 0; i < 8; i++ {
		reversed |= (value0 & (1 << uint(i))) >> uint(i) << uint(7-i)
	}
	return reversed
}
func reverseBytes(data []byte) []byte {
	length := len(data)
	reversed := make([]byte, length)
	for i, value := range data {
		reversed[length-1-i] = value
	}
	return reversed
}
func sha256Hash(data []byte) [32]byte {
	h := sha256.New()
	h.Reset()

	var b [32]byte

	// The hash interface never returns an error, for that reason
	// we are not handling the error below. For reference, it is
	// stated here https://golang.org/pkg/hash/#Hash

	// #nosec G104
	h.Write(data)
	h.Sum(b[:0])

	return b
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////
func getSignatureFromBlock(block *types.Block) (error, []byte) {
	extra, err := types.ExtractIstanbulExtra(block.Header())
	if err != nil {
		return err, nil
	}
	return nil, extra.AggregatedSeal.Signature
}
func getValidatorsBlsPubkey(conn *rpc.Client, number *big.Int) (error, [][]byte) {
	var pubs []blscrypto.SerializedPublicKey
	if err := conn.Call(&pubs, "istanbul_getValidatorsBLSPublicKeys", toBlockNumArg(number)); err != nil {
		fmt.Println(err)
		return err, nil
	}
	data := make([][]byte, len(pubs))
	for i := 0; i < len(pubs); i++ {
		data[i] = append(data[i], pubs[i][:]...)
		//log.Printf("public key:%d %x", len(data[i]), data[i])
	}
	return nil, data
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////
func getWeightField(count int) []uint {
	weights := make([]uint, PUBLENGTH)
	for i := 0; i < count; i++ {
		weights[i] = 1
	}
	return weights
}
func getBitmapField(validatorSum int, block *types.Block) (error, []uint) {
	extra, err := types.ExtractIstanbulExtra(block.Header())
	if err != nil {
		return err, nil
	}
	//fmt.Println("bitmap", extra.AggregatedSeal.Bitmap.String(), "Signature", hex.EncodeToString(extra.AggregatedSeal.Signature))
	values := make([]uint, PUBLENGTH)
	for i := 0; i < PUBLENGTH; i++ {
		if extra.AggregatedSeal.Bitmap.Bit(i) == 1 {
			values[i] = 1
		}
	}
	return nil, values
}
func handlePubekeyField(pubkey []byte) (error, [][][]uint64) {
	if len(pubkey) != 128 {
		return errors.New("wrong pubkey"), nil
	}
	// x.ci -> x.cr -> y.ci -> y.cr
	x_ci, x_cr, y_ci, y_cr := pubkey[0:32], pubkey[32:64], pubkey[64:96], pubkey[96:128]
	//fmt.Println(len(x_ci), len(x_cr), len(y_ci), len(y_cr))
	//fmt.Println(pubkey)
	//fmt.Println(x_ci)
	//fmt.Println(x_cr)
	//fmt.Println(y_ci)
	//fmt.Println(y_cr)

	x_ci_data := handle32Bytes(x_ci)
	x_cr_data := handle32Bytes(x_cr)
	y_ci_data := handle32Bytes(y_ci)
	y_cr_data := handle32Bytes(y_cr)
	//fmt.Println("x_ci", x_ci_data)
	//fmt.Println("x_cr", x_cr_data)
	//fmt.Println("y_ci", y_ci_data)
	//fmt.Println("y_cr", y_cr_data)

	values := make([][][]uint64, 0)
	x_data := make([][]uint64, 0)
	y_data := make([][]uint64, 0)
	// x.cr -> x.ci -> y.cr -> y.ci
	x_data = append(x_data, x_cr_data)
	x_data = append(x_data, x_ci_data)
	y_data = append(y_data, y_cr_data)
	y_data = append(y_data, y_ci_data)
	values = append(values, x_data)
	values = append(values, y_data)

	return nil, values
}
func handleSignatureField(signature []byte) (error, [][]uint64) {
	if len(signature) != 64 {
		return errors.New("wrong signature"), nil
	}
	x, y := signature[0:32], signature[32:64]

	x_data := handle32Bytes(x)
	y_data := handle32Bytes(y)

	values := make([][]uint64, 0)
	// x -> y
	values = append(values, x_data)
	values = append(values, y_data)

	return nil, values
}
func handleBlockHashField(block *types.Block) (error, [][]uint64, []byte, []byte) {
	err, hash := getMsgFromBlock(block)
	if err != nil {
		return err, nil, nil, nil
	}
	return handleHashField(hash)
}

func getMsgFromBlock(block *types.Block) (error, []byte) {
	hash := block.Hash()
	//fmt.Println("block hash", hash.Hex())
	extra, err := types.ExtractIstanbulExtra(block.Header())
	if err != nil {
		return err, nil
	}
	round := extra.AggregatedSeal.Round
	return nil, istanbulCore.PrepareCommittedSeal(hash, round)
}
func handleHashField(hash []byte) (error, [][]uint64, []byte, []byte) {
	p0, err := hex.DecodeString("30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47")
	if err != nil {
		return err, nil, nil, nil
	}
	p := new(big.Int).SetBytes(p0)
	v0 := new(big.Int).SetBytes(crypto.Keccak256Hash(append([]byte{0x00}, hash...)).Bytes())
	v1 := new(big.Int).SetBytes(crypto.Keccak256Hash(append([]byte{0x01}, hash...)).Bytes())
	t0 := new(big.Int).Lsh(v0, 256)
	t0 = new(big.Int).Add(t0, v1)
	t0 = new(big.Int).Mod(t0, p)

	b0 := t0.Bytes() // must be 32 bytes
	b0 = padTo32Bytes(b0)
	fmt.Println("t0", t0.Text(10))

	v2 := new(big.Int).SetBytes(crypto.Keccak256Hash(append([]byte{0x02}, hash...)).Bytes())
	v3 := new(big.Int).SetBytes(crypto.Keccak256Hash(append([]byte{0x03}, hash...)).Bytes())
	t1 := new(big.Int).Lsh(v2, 256)
	t1 = new(big.Int).Add(t1, v3)
	t1 = new(big.Int).Mod(t1, p)

	b1 := t1.Bytes() // must be 32 bytes
	b1 = padTo32Bytes(b1)
	fmt.Println("t1", t1.Text(10))

	t0_data := handle32Bytes(b0)
	t1_data := handle32Bytes(b1)

	values := make([][]uint64, 0)
	// x -> y
	values = append(values, t0_data)
	values = append(values, t1_data)

	return nil, values, b0, b1
}
func handleCommitmentField(valInfo, t0, t1 []byte) string {
	validator_com := sha256Hash(valInfo)
	//fmt.Println("validator_com hash:", hex.EncodeToString(validator_com[:]))
	hash := sha256Hash(append(append([]byte{}, t0...), t1...))
	//fmt.Println("t0 hash:", hex.EncodeToString(hash[:]))
	commitment := sha256Hash(append(append([]byte{}, validator_com[:]...), hash[:]...))
	fmt.Println("commitment hash:", hex.EncodeToString(commitment[:]))
	v0 := new(big.Int).SetBytes(commitment[:])
	//fmt.Println("Commitment0-0", v0.Text(10), "Commitment0-1", hex.EncodeToString(commitment[:]))
	v := clearTopThreeBits(v0)
	return v.Text(10)
}
func makeValidatorInfo(blsPubkeys [][]byte) []byte {
	data := make([]byte, 0)
	count := len(blsPubkeys)
	left := 0
	if PUBLENGTH > count {
		left = PUBLENGTH - count
	}
	length := left * 160
	data1 := make([]byte, length)
	// info: pubkey+weight
	for i := 0; i < count; i++ {
		data = append(data, blsPubkeys[i]...)
		weight := []byte{0x01}
		weight = padTo32Bytes(weight)
		data = append(data, weight...)
	}
	data = append(data, data1...)
	fmt.Println("valinfo len", len(data), hex.EncodeToString(data[:]))
	return data
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////
func makeBlockZKProofParams(conn *rpc.Client, block *types.Block) (map[string]interface{}, error) {
	//block, err := conn.BlockByNumber(context.Background(), num)
	//if err != nil {
	//	return nil, err
	//}
	num := block.Number()
	// 1. make the current pubkeys params
	err, blsPubs := getValidatorsBlsPubkey(conn, num)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	// validators count
	count := len(blsPubs)
	left := 0
	if count < PUBLENGTH {
		left = PUBLENGTH - count
	}
	blsPubs1 := keepedBlsPub(left)
	blsPubs0 := append(blsPubs, blsPubs1...)
	if len(blsPubs0) != PUBLENGTH {
		return nil, errors.New("blsPubs count must be 8")
	}

	pubkeyUnit64s := make([][][][]uint64, len(blsPubs0))
	for i, pubkey := range blsPubs0 {
		fmt.Println("index", i, hex.EncodeToString(pubkey))
		err, valUint64 := handlePubekeyField(pubkey)
		if err != nil {
			return nil, err
		}
		pubkeyUnit64s[i] = valUint64
	}
	fmt.Println("pubkeys", pubkeyUnit64s)
	// 2. make the weight of the validators, pubkeys had same order for the weights
	weights := getWeightField(count)
	fmt.Println("weight....", weights)
	// 3. make the bitmap for validator's signatrue
	err, bitmaps := getBitmapField(count, block)
	if err != nil {
		return nil, err
	}
	fmt.Println("bitmap", bitmaps)
	// 4. make the signature for the block
	err, sigData := getSignatureFromBlock(block)
	if err != nil {
		return nil, err
	}
	fmt.Println("signature", hex.EncodeToString(sigData))
	err, sigValueUint64 := handleSignatureField(sigData)
	if err != nil {
		return nil, err
	}
	fmt.Println("signature data", sigValueUint64)
	// 5. make the hash params, for block is the message for signature
	err, hashParam, t0, t1 := handleBlockHashField(block)
	if err != nil {
		return nil, err
	}
	fmt.Println("block hash param", hashParam)
	// 6. make the commitment
	commitment := handleCommitmentField(makeValidatorInfo(blsPubs), t0, t1)
	fmt.Println("commitment", commitment)

	// make the json data
	fmt.Println("make the json data............")
	infos := map[string]interface{}{}
	infos["pubkeys"] = toString2(pubkeyUnit64s)
	infos["weights"] = weights
	infos["bit_map"] = bitmaps
	infos["signature"] = toString(sigValueUint64)
	infos["hash"] = toString(hashParam)
	infos["commitment"] = []string{commitment}

	fmt.Println("json data ....")
	jsonData, err := json.Marshal(infos)
	if err != nil {
		fmt.Println("Error:", err)
		return nil, err
	}
	fmt.Println(string(jsonData))
	return infos, nil
}
func makeBlockZKProofParams2(block *types.Block, blsPubs [][]byte) ([]byte, error) {
	// 1. make the current pubkeys params
	// validators count
	count := len(blsPubs)
	left := 0
	if count < PUBLENGTH {
		left = PUBLENGTH - count
	}
	blsPubs1 := keepedBlsPub(left)
	blsPubs0 := append(blsPubs, blsPubs1...)
	if len(blsPubs0) != PUBLENGTH {
		return nil, errors.New("blsPubs count must be 8")
	}

	pubkeyUnit64s := make([][][][]uint64, len(blsPubs0))
	for i, pubkey := range blsPubs0 {
		fmt.Println("index", i, hex.EncodeToString(pubkey))
		err, valUint64 := handlePubekeyField(pubkey)
		if err != nil {
			return nil, err
		}
		pubkeyUnit64s[i] = valUint64
	}
	fmt.Println("pubkeys", pubkeyUnit64s)
	// 2. make the weight of the validators, pubkeys had same order for the weights
	weights := getWeightField(count)
	fmt.Println("weight....", weights)
	// 3. make the bitmap for validator's signatrue
	err, bitmaps := getBitmapField(count, block)
	if err != nil {
		return nil, err
	}
	fmt.Println("bitmap", bitmaps)
	// 4. make the signature for the block
	err, sigData := getSignatureFromBlock(block)
	if err != nil {
		return nil, err
	}
	fmt.Println("signature", hex.EncodeToString(sigData))
	err, sigValueUint64 := handleSignatureField(sigData)
	if err != nil {
		return nil, err
	}
	fmt.Println("signature data", sigValueUint64)
	// 5. make the hash params, for block is the message for signature
	err, hashParam, t0, t1 := handleBlockHashField(block)
	if err != nil {
		return nil, err
	}
	fmt.Println("block hash param", hashParam)
	// 6. make the commitment
	commitment := handleCommitmentField(makeValidatorInfo(blsPubs), t0, t1)
	fmt.Println("commitment", commitment)

	// make the json data
	fmt.Println("make the json data............")
	infos := map[string]interface{}{}
	infos["pubkeys"] = toString2(pubkeyUnit64s)
	infos["weights"] = weights
	infos["bit_map"] = bitmaps
	infos["signature"] = toString(sigValueUint64)
	infos["hash"] = toString(hashParam)
	infos["commitment"] = []string{commitment}

	fmt.Println("json data ....")
	jsonData, err := json.Marshal(infos)
	if err != nil {
		fmt.Println("Error:", err)
		return nil, err
	}
	fmt.Println(string(jsonData))
	return jsonData, nil
}

// /////////////////////////////////////////////////////////////////////////////////////////////////////////////
func GetProofParamsForBlock1(conn *rpc.Client, block *types.Block) ([]byte, error) {
	num := block.Number()
	// 1. make the current pubkeys params
	err, blsPubs := getValidatorsBlsPubkey(conn, num)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return makeBlockZKProofParams2(block, blsPubs)
}
